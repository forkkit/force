Process(Spec{
	// Listen for bot commands and activate actions
	Watch: slack.Listen(
		slack.Command{
			// Publish release publishes a release for the software package
			Name:    "publish release",
			// Confirm if specified, will ask for special confirmation
			// before triggering the command
			Confirm: false,
			// Help is an arbitrary string for the command
			Help: "Publishes a release. Use flags to control the publish process. For example, to build and publish all non-Windows builds:\n`publish release with flags build-linux-amd64, build-darwin-amd64, build-linux-arm, publish-s3, publish-image`.\nTo build and publish only macOS binaries:\n`publish teleport with version, flags build-rpm.`\n",
			// Fields configures slack chatbot command parameters
			Fields: []slack.Field{
				{
					Name:     "version",
					Required: true,
					Value:    &slack.String{},
					Help:     "`version` sets version to build and publish",
				},
				{
					Name: "flags",
					Value: &slack.StringsEnum{
						DefaultAll: true,
						Enum: Strings(
							"build-rpm",
							"build-deb",
						)},
						Help: "`flags` selects publishing steps, by default builds/publish everything",
				},
			},
		}),
	// PostStatus wraps a function and tracks the status of the function execution
	// by posting updates to slack
	Run: slack.PostStatusOf(func(){
		If(
			// The event generated by the slack plugin
			// contains Values with parameters from the `Fields` section:
			// slack.Field `flags` becomes event.Values.Flags
			Contains(event.Values.Flags, "build-deb"),
			Infof("Deploying build-deb"),
		)
		Infof("Got deployment request: version %v, flags %v", event.Values.Version, event.Values.Flags)
	}()),
})
