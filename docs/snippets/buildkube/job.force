func(){
	// containerSetupScript specifies configuration
	// for force's kubernetes container
	containerSetupScript := Marshal(
		// Setup configures force plugins, configurations
		// all other force files share the configuration defined in this file
		Setup(
			// Logging sets up logging to stackdriver
			// and stdout as well, with the current implementation,
			// it should go first so other plugins can use it
			log.Setup(log.Config{
				Level: "info",
				Outputs: []log.Output{
					{
						Type: "stdout",
					},
					{
						Type: "stackdriver",
						CredentialsFile: ExpectEnv("GOOGLE_CREDENTIALS"),
					},
				},
			}),
			// Builder configures docker builder
			builder.Setup(builder.Config{
				// Logs into quay io server
				Server: "gcr.io",
				// Username is a username to login with the registry server
				// TODO: think how to best check for defined values?
				Username: "_json_key",
				// SecretFile is a registry password
				SecretFile: ExpectEnv("GOOGLE_CREDENTIALS"),
			}),
		),
	)

	// forceImage is a force image to run in kuberentes
	forceImage := "gcr.io/kubeadm-167321/force:0.0.18"

	// RunBuildJob builds and publishes an image,
	// it expects image name to publish and a name of the configmap
	// with Dockerfile to mount
	RunBuildJob := func(image string, configmapName string){
		// build script is a build script to run
		buildScript := Marshal(
			Process(Spec{
				Name: "kbuild",
				Run: func(){
					Defer(Exit())
					// Build builds dockerfile and tags it in the local storage
					builder.Build(builder.Image{
						// Context expects /var/dockerfile to be pre-mounted
						// by the container, so it's OK to hardcode here
						Context: "/var/dockerfile",
						// Dockerfile is a dockerfile to build (from current dir),
						Dockerfile: "/var/dockerfile/Dockerfile",
						// Unquote passes the image name to push
						Tag: Unquote(image),
					})
					builder.Push(builder.Image{Tag: Unquote(image)})
				},
			}),
		)
		// Run Kuberentes job that builds and publishes images
		kube.Run(kube.Job{
			Name: Sprintf("builder-%v", ID()),
			Spec: _{
				Template: _{
					Spec: _{
						Containers: []_{
							{
								Name: "kbuild",
								Image: forceImage,
								Command: Strings("force", "-d"),
								Env: []_{
									// ID is passed so the job spawned in k8s
									// will have the same job id, having the same logs
									{Name: "FORCE_ID",Value: ID()},
									// Script is passed as an environment variable,
									// thanks to Marshal the script is inline,
									// can reference outside variables
									{
										Name: "FORCE_SCRIPT",
										Value: buildScript,
									},
									// Setup is passed as an environment variable
									{
										Name: "FORCE_SETUP",
										Value: containerSetupScript,
									},
									// Google credentials are mounted from config map
									{Name: "GOOGLE_CREDENTIALS", Value: "/var/secrets/google/force-creds.json"},
								},
								VolumeMounts: []_{
									// tmp is for temporary directory
									{Name: "tmp", MountPath: "/tmp"},
									// cache is for container build cache
									{Name: "cache", MountPath: "/root/.local"},
									// creds is for google creds
									{Name: "creds", MountPath: "/var/secrets/google"},
									// scripts is a script with a dockerfile
									{Name: "dockerfile", MountPath: "/var/dockerfile"},
								},
								// Latest K8s supports unprivileged builds starting 1.12, but not every single
								// managed K8s offering supports it yet
								//
								// https://github.com/genuinetools/img#running-with-kubernetes
								// 
								SecurityContext: _{Privileged: true},
							},
						},
						Volumes: []_{
							// creds is a volume with google creds
							{Name: "creds", Secret: _{SecretName: "creds"}},
							// dockerfile mounts configMap with Dockerfile supplied by user
							{Name: "dockerfile", ConfigMap: _{Name: configmapName}},
							{Name: "cache", EmptyDir: _{}},
							{Name: "tmp", EmptyDir: _{}},
						},
					},
				},
			},
		})
	}
}()
