// This commit defines a simple pipeline that
// requires approval for external contributors,
// clones the pull request commit on every update,
// builds and pushes the docker image
Process(Spec{
	Name: "force-ci",
	Watch: github.PullRequests(github.Source{
		// Repo is a repository to watch
		Repo: "gravitational/force",
		// Default branch is master
		Branch: "master",
		// Approval optinally configures an approval flow
		Approval: github.Approval{
			// Requies sets the approval as required
			Required: true,
			// Teams is a list of github teams who can approve PR test
			// or auto trigger pull request if they submit it.
			// If the PR author is on the team approval list,
			// the actions are triggered automatically,
			// otherwise, one of the team members has to post
			// "ok to test"
			Teams: Strings("gravitational/devc", "gravitational/admins"),
		},
	}),
	Run:github.PostStatusOf(
		func(){
			// Create temporary directory "repoDir" and cleanup
			// when this function is done
			repoDir := TempDir("", "")
			Defer(RemoveAll(repoDir))
			// Clone clones git repository into temp dir
			git.Clone(git.Repo{
				URL: "git@github.com:gravitational/force.git",
				Into: repoDir,
				// event is generated by github.PullRequests
				// and contains `Commit` hash property
				Hash: event.Commit,
			})
			// Image is an image name to build
			image := Sprintf(`gcr.io/kubeadm-167321/example:%v`, event.Commit)
			// Build builds dockerfile and tags it in the local storage
			builder.Build(builder.Image{
				// Set build context to the cloned repository
				Context: repoDir,
				// Dockerfile is a dockerfile to build
				Dockerfile: "./Dockerfile",
				// Tag is the tag to build
				Tag: image,
				// Secrets are build secrets exposed to docker
				// container during the run
				Secrets: []builder.Secret{
					{
						ID: "logging-creds",
						File: ExpectEnv("GOOGLE_CREDENTIALS"),
					},
				},
				// Args are build arguments
				Args: []builder.Arg{
					{
						// FORCE_ID is a force run ID
						Key: "FORCE_ID",
						Val: ID(),
					},
				},
			})
			// Push the built image
			builder.Push(builder.Image{Tag: image})
			// Prune the build cache
			builder.Prune()
		}(),
	),
})
