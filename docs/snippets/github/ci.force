Process(Spec{
	Name: "force-ci",
	// Watch pull requests to master branch
	Watch: github.PullRequests(github.Source{
		// Repo is a repository to watch
		Repo: "gravitational/force",
		// Default branch is master
		Branch: "master",
		// Approval optinally configures an approval flow
		Approval: github.Approval{
			// Requies sets the approval as required
			Required: true,
			// Teams is a list of github teams who can approve PR test
			// or auto trigger pull request if they submit it.
			// If the PR author is on the team approval list,
			// the actions are triggered automatically,
			// otherwise, one of the team members has to post
			// "ok to test"
			Teams: Strings("gravitational/devc", "gravitational/admins"),
		},
	}),
	// PostStatusOf is a decorator function that tracks the status
	// of the inner function call and updates pull request status
	// with "Pending" , "Succeeded" or "Failed" statuses based on the
	// function call result
	Run:github.PostStatusOf(
		func(){
			// Create temporary directory "repoDir"
			repoDir := TempDir("", "")
			Defer(RemoveAll(repoDir))
			// Clone clones git repository into temp dir
			git.Clone(git.Repo{
				// Both SSH and HTTPS urls are supported
				URL: "git@github.com:gravitational/force.git",
				Into: repoDir,
				// event is generated by github.PullRequests
				// and contains `Commit` hash
				Hash: event.Commit,
			})
			Command(Sprintf("ls -l %v", repoDir))
		}(),
	),
})
