Process(Spec{
	Name: "kube",
	Watch: Oneshot(),
	Run: func(){
		Defer(Exit())
		Parallel(
			kube.Run(kube.Job{
			Name: Sprintf("hello-second-%v", ID()),
			Volumes: []kube.Volume{
				{
					Name: "gocache",
					EmptyDir: &kube.EmptyDir{},
				},
			},			
			Containers: []kube.Container{
				{
					Image: "busybox",
					Name: "busybox",
					Command: Strings("/bin/sh", "-c", `echo "hello, first $GOCACHE" && sleep 10;`),
					Env: []kube.EnvVar{
						{
							Name: "GOCACHE",
							Value: "/mnt/gocache",
						},
					},
					VolumeMounts: []kube.VolumeMount{
						{
							Name: "gocache",
							MountPath: "/mnt/gocache",
						},
					},					
				},
			},
			}),
			kube.Run(kube.Job{
				Name: Sprintf("hello-first-%v", ID()),
				Volumes: []kube.Volume{
					{
						Name: "gocache",
						EmptyDir: &kube.EmptyDir{},
					},
				},
				Containers: []kube.Container{
					{
						Image: "busybox",
						Name: "busybox",
						Command: Strings("/bin/sh", "-c", `echo "hello, second $GOCACHE" && sleep 10;`),
						Env: []kube.EnvVar{
							{
								Name: "GOCACHE",
								Value: "/mnt/gocache",
							},
						},
						VolumeMounts: []kube.VolumeMount{
							{
								Name: "gocache",
								MountPath: "/mnt/gocache",
							},
						},
					},
				},
			}),
		)
	},
})
