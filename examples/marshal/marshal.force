// This example demonstrates how to marshal
// parts of force script to string
Process(Spec{
	Name: "marshal",
	Watch: Oneshot(),
	Run: Sequence(
		Define("repo", "/tmp/bla"),		
		Define("command", ExpectEnv("LOGGING_CREDENTIALS")),
		Define("commit", "abcdef"),
		// image is a test image to build
		Define("image", Sprintf(`gcr.io/kubeadm-167321/teleport-tests:%v`, Var("commit"))),
		// buildbox is a version of the buildbox
		Define("buildbox", "gcr.io/kubeadm-167321/buildbox:1.12.1"),
		// Version to etcd to install in a container
		Define("etcdVer", "v3.3.13"),
		// UID is the uid to run the jobs
		Define("uid", 1000),
		// GID is the gid to run the jobs
		Define("gid", 1000),
		Infof("%v", Marshal(
			Setup(
				// Github is a setup of the github plugin valid in the
				// context of this group, all calls to github methods will be using
				// this syntax
				Github(GithubConfig{
					// Token is a github access token
					// passed to all callers in the group
					Token: ExpectEnv("GITHUB_ACCESS_TOKEN"),
				}),

				// Git sets up git client for cloning repositories
				Git(GitConfig{
					Token: ExpectEnv("GITHUB_ACCESS_TOKEN"),
				}),
				// Builder configures docker builder
				Builder(BuilderConfig{
					// Logs into quay io server
					Server: "gcr.io",
					// Username is a username to login with the registry server
					// TODO: think how to best check for defined values?
					Username: ExpectEnv("REGISTRY_USERNAME"),
					// SecretFile is a registry password
					SecretFile: ExpectEnv("REGISTRY_SECRET"),
				}),
				// Logging sets up logging to stackdriver
				// and stdout as well, with the current implementation,
				// it should go first so other plugins can use it
				Log(LogConfig{
					Level: "info",
					Outputs: []Output{
						{
							Type: "stdout",
						},
						{
							Type: "stackdriver",
							CredentialsFile: ExpectEnv("LOGGING_CREDENTIALS"),
						},
					},
				}),
				// Kube sets up kubernetes
				Kube(KubeConfig{
					// Path is a path to kubeconfig,
					// which is optional, if not set,
					// force assumes that it is running inside kubernetes
					Path: ExpectEnv("KUBE_CREDENTIALS"),
				}),
			),
		)),
		Infof("%v", Marshal(
			Process(Spec{
				Name: "internal",
				Watch: Oneshot(),
				Run: Sequence(
					Define("tempDir", "/tmp/bla"),
					Defer(RemoveDir(Var("tempDir"))),
					Build(Image{
						// Set build context to the cloned repository
						Context: Unquote(Var("repo")),
						// Dockerfile is a dockerfile to build (from current dir),
						Dockerfile: TempDir(),
						// Tag is the tag to build - here, as you see, we need to reimplement
						// Sprintf and every other method that works with our vars
						Tag: Var("image"),
						// Args are build arguments
						Args: []Arg{
							{Key: "BUILDBOX", Val: Var("buildbox")},
							{Key: "UID", Val: Sprintf("%v", Var("uid"))},
							{Key: "GID", Val: Sprintf("%v", Var("gid"))},
							{Key: "ETCD_VER", Val: Var("etcdVer")},
						},
					}),
				),
			}),			
		)),
		Exit(),
	),
})
