// Process defines a set of actions triggered by a channel
Process(Spec{
	// Name is used for reporting and debugging purposes
	Name: "teleport-ci",
	// Watch pull requests
	Watch: PullRequests(Source{
		// Repo is a repository to watch
		Repo: "gravitational/teleport",
	}),
	// No namespaces is a problem - how to define modules?
	// can I just do github.PostStatusOf?
	// also, should be more strict with variables, reference of an undefined
	// variable or shadowing of an existing one should be a problem
	Run: PostStatusOf(
		Sequence(
			// image is a test image to build
			Define("image", Sprintf(`gcr.io/kubeadm-167321/teleport-tests:%v`, Var("commit"))),
			// buildbox is a version of the buildbox
			Define("buildbox", "gcr.io/kubeadm-167321/buildbox:1.12.1"),
			// Version to etcd to install in a container
			Define("etcdVer", "v3.3.13"),
			// UID is the uid to run the jobs
			Define("uid", 1000),
			// GID is the gid to run the jobs
			Define("gid", 1000),			
			Define("forceImage", "gcr.io/kubeadm-167321/force:0.0.1-7"),
			Run(Job{
				Name: Sprintf("tele-build-%v", ID()),
				Volumes: []Volume{
					{Name: "creds", Secret: &SecretSource{Name: "creds"}},
					{Name: "gitkey", Secret: &SecretSource{Name: "gitkey"}},						
					{Name: "scripts", ConfigMap: &ConfigMapSource{Name: "scripts"}},
					{Name: "cache", EmptyDir: &EmptyDirSource{}},
					{Name: "tmp", EmptyDir: &EmptyDirSource{}},
				},
				Containers: []Container{
					{
						Name: "kbuild",					
						Image: Var("forceImage"),
						Command: Strings("force", "-d"),					
						Env: []EnvVar{
							// ID is passed so the job spawned in k8s
							// will have the same job id, having the same logs
							{Name: "FORCE_ID",Value: ID()},
							// Script is passed as an environment variable,
							// thanks to Marshal the script is inline,
							// can reference outside variables
							{
								Name: "FORCE_SCRIPT",
								Value: Marshal(
									Process(Spec{
										Name: "kbuild",
										Run: Sequence(
											Defer(Exit()),
											// Create temporary directory "repo",			
											Define("repo", TempDir()),
											// Remove it at the end of this sequence
											Defer(RemoveDir(Var("repo"))),
											// Clone clones git repository into temp dir
											Clone(Repo{
												URL: "git@github.com:gravitational/teleport.git",
												Into: Var("repo"),
												// Commit is a commit variable defined by pull request watch,
												// the problem is that there is no namespacing here
												Hash: Unquote(Var("commit")),
												// Submodules is an optional submodule to init
												Submodules: Strings("e"),
											}),
											// Build builds dockerfile and tags it in the local storage
											Build(Image{
												// Set build context to the cloned repository
												Context: Var("repo"),
												// Dockerfile is a dockerfile to build (from current dir),
												Dockerfile: "/mnt/scripts/test.dockerfile",
												// Tag is the tag to build - here, as you see, we need to reimplement
												// Sprintf and every other method that works with our vars
												Tag: Unquote(Var("image")),
												// Args are build arguments
												Args: []Arg{
													{Key: "BUILDBOX", Val: Unquote(Var("buildbox"))},
													{Key: "UID", Val: Sprintf("%v", Unquote(Var("uid")))},
													{Key: "GID", Val: Sprintf("%v", Unquote(Var("gid")))},
													{Key: "ETCD_VER", Val: Unquote(Var("etcdVer"))},
												},
											}),
											Push(Image{Tag: Unquote(Var("image"))}),
										),
									}),
								),
							},
							// Setup is passed as an environment variable
							{
								Name: "FORCE_SETUP",
								Value: Marshal(
									// Setup configures force plugins, configurations
									// all other force files share the configuration defined in this file
									Setup(
										// Logging sets up logging to stackdriver
										// and stdout as well, with the current implementation,
										// it should go first so other plugins can use it
										Log(LogConfig{
											Level: "info",
											Outputs: []Output{
												{
													Type: "stdout",
												},
												{
													Type: "stackdriver",
													CredentialsFile: ExpectEnv("GOOGLE_CREDENTIALS"),
												},
											},
										}),
										// Git sets up git client for cloning repositories
										Git(GitConfig{
											PrivateKeyFile: ExpectEnv("GIT_PRIVATE_KEY_FILE"),
											KnownHostsFile: ExpectEnv("GIT_KNOWN_HOSTS_FILE"),
										}),
										// Builder configures docker builder
										Builder(BuilderConfig{
											// Logs into quay io server
											Server: "gcr.io",
											// Username is a username to login with the registry server
											// TODO: think how to best check for defined values?
											Username: "_json_key",
											// SecretFile is a registry password
											SecretFile: ExpectEnv("GOOGLE_CREDENTIALS"),
										}),
									),
								),
							},
							{Name: "GOOGLE_CREDENTIALS", Value: "/var/secrets/google/force-creds.json"},
							{Name: "GIT_PRIVATE_KEY_FILE", Value: "/var/secrets/git/github.key"},
							{Name: "GIT_KNOWN_HOSTS_FILE", Value: "/var/secrets/git/known_hosts"},
						},
						VolumeMounts: []VolumeMount{
							// tmp is for temporary directory, just in case
							{Name: "tmp", MountPath: "/tmp"},
							// cache is for container build cache
							{Name: "cache", MountPath: "/root/.local"},
							// creds is for google creds
							{Name: "creds", MountPath: "/var/secrets/google"},
							// scripts is a script with a dockerfile
							{Name: "gitkey", MountPath: "/var/secrets/git"},
							// scripts is a script with a dockerfile
							{Name: "scripts", MountPath: "/mnt/scripts"},								
						},
						SecurityContext: &SecurityContext{Privileged: true},
					},
				},
			}),
			// Run two test jobs in parallel
			Parallel(
				// Run the test job
				Run(Job{
					Name: Sprintf("tel-test-%v", ID()),
					SecurityContext: &PodSecurityContext{RunAsUser: Var("uid"), RunAsGroup: Var("gid")},
					Volumes: []Volume{
						{Name: "gocache", EmptyDir: &EmptyDirSource{}},
						{Name: "etcd", EmptyDir: &EmptyDirSource{}},
					},
					Containers: []Container{
						{
							Image: Var("image"),
							Name: "test",
							Command: Strings(
								"/bin/bash", "-c",
								"./examples/etcd/start-etcd.sh & sleep 1; make FLAGS='-cover -race' test",
							),
							WorkingDir: "/gopath/src/github.com/gravitational/teleport/",
							Env: []EnvVar{{Name: "GOCACHE", Value: "/mnt/gocache"}},
							VolumeMounts: []VolumeMount{
								{Name: "gocache", MountPath: "/mnt/gocache"},
								{Name: "etcd", MountPath: "/gopath/src/github.com/gravitational/teleport/examples/etcd/data"},
							},
							TTY: true,
							Stdin: true,
						},
					},
				}),
				// Run the integration job
				Run(Job{
					Name: Sprintf("tel-int-%v", ID()),
					SecurityContext: &PodSecurityContext{RunAsUser: Var("uid"), RunAsGroup: Var("gid")},
					Volumes: []Volume{
						{Name: "gocache", EmptyDir: &EmptyDirSource{}},
					},
					Containers: []Container{
						{
							Image: Var("image"),
							Name: "test",
							Command: Strings(
								"/bin/bash", "-c", "make FLAGS='-cover' integration",
							),
							WorkingDir: "/gopath/src/github.com/gravitational/teleport/",
							Env: []EnvVar{{Name: "GOCACHE", Value: "/mnt/gocache"}},
							VolumeMounts: []VolumeMount{
								{Name: "gocache", MountPath: "/mnt/gocache"},
							},
							TTY: true,
							Stdin: true,
						},
					},
				}),
			),
		),
	),
})
