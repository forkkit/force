// Process defines a set of actions triggered by a channel
Process(Spec{
	// Name is used for reporting and debugging purposes
	Name: "teleport-ci",
	// Watch pull requests
	Watch: PullRequests(Source{
		// Repo is a repository to watch
		Repo: "gravitational/teleport",
	}),
	// No namespaces is a problem - how to define modules?
	// can I just do github.PostStatusOf?
	// also, should be more strict with variables, reference of an undefined
	// variable or shadowing of an existing one should be a problem
	Run: PostStatusOf(
		Sequence(
			// Create temporary directory "repo",			
			Define("repo", TempDir()),
			// Remove it at the end of this sequence
			Defer(RemoveDir(Var("repo"))),
			// Clone clones git repository into temp dir
			Clone(Repo{
				URL: "https://github.com/gravitational/teleport.git",
				Into: Var("repo"),
				// Commit is a commit variable defined by pull request watch,
				// the problem is that there is no namespacing here
				Hash: Var("commit"),
				// Submodules is an optional submodule to init
				Submodules: Strings("e"),
			}),
			// image is a test image to build
			Define("image", Sprintf(`gcr.io/kubeadm-167321/teleport-tests:%v`, Var("commit"))),
			// buildbox is a version of the buildbox
			Define("buildbox", "gcr.io/kubeadm-167321/buildbox:1.12.1"),
			// Version to etcd to install in a container
			Define("etcdVer", "v3.3.13"),
			// UID is the uid to run the jobs
			Define("uid", 1000),
			// GID is the gid to run the jobs
			Define("gid", 1000),
			// Build builds dockerfile and tags it in the local storage
			Build(Image{
				// Set build context to the cloned repository
				Context: Var("repo"),
				// Dockerfile is a dockerfile to build (from current dir),
				Dockerfile: "./test.dockerfile",
				// Tag is the tag to build - here, as you see, we need to reimplement
				// Sprintf and every other method that works with our vars
				Tag: Var("image"),
				// Args are build arguments
				Args: []Arg{
					{Key: "BUILDBOX", Val: Var("buildbox")},
					{Key: "UID", Val: Sprintf("%v", Var("uid"))},
					{Key: "GID", Val: Sprintf("%v", Var("gid"))},
					{Key: "ETCD_VER", Val: Var("etcdVer")},
				},
			}),
			Push(Image{Tag: Var("image")}),
			Parallel(
				// Run the test job
				Run(Job{
					Name: Sprintf("tel-test-%v", ID()),
					SecurityContext: &PodSecurityContext{RunAsUser: Var("uid"), RunAsGroup: Var("gid")},
					Volumes: []Volume{
						{Name: "gocache", EmptyDir: &EmptyDirSource{}},
						{Name: "etcd", EmptyDir: &EmptyDirSource{}},
					},
					Containers: []Container{
						{
							Image: Var("image"),
							Name: "test",
							Command: Strings(
								"/bin/bash", "-c",
								"./examples/etcd/start-etcd.sh & sleep 1; make FLAGS='-cover -race' test",
							),
							WorkingDir: "/gopath/src/github.com/gravitational/teleport/",
							Env: []EnvVar{{Name: "GOCACHE", Value: "/mnt/gocache"}},
							VolumeMounts: []VolumeMount{
								{Name: "gocache", MountPath: "/mnt/gocache"},
								{Name: "etcd", MountPath: "/gopath/src/github.com/gravitational/teleport/examples/etcd/data"},
							},
							TTY: true,
							Stdin: true,
						},
					},
				}),
				// Run the integration job
				Run(Job{
					Name: Sprintf("tel-int-%v", ID()),
					SecurityContext: &PodSecurityContext{RunAsUser: Var("uid"), RunAsGroup: Var("gid")},
					Volumes: []Volume{
						{Name: "gocache", EmptyDir: &EmptyDirSource{}},
					},
					Containers: []Container{
						{
							Image: Var("image"),
							Name: "test",
							Command: Strings(
								"/bin/bash", "-c", "make FLAGS='-cover' integration",
							),
							WorkingDir: "/gopath/src/github.com/gravitational/teleport/",
							Env: []EnvVar{{Name: "GOCACHE", Value: "/mnt/gocache"}},
							VolumeMounts: []VolumeMount{
								{Name: "gocache", MountPath: "/mnt/gocache"},
							},
							TTY: true,
							Stdin: true,
						},
					},
				}),
			),
		),
	),
})
