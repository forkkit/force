// this sets up the local force runner - it is separate to the marshal'd Setup() block
// inside release-lib.force (which is used to set up force jobs inside the Kubernetes cluster)
Setup(
	log.Setup(log.Config{
		Level: "info",
		Outputs: []log.Output{
			{
				Type: "stdout",
			},
			{
				Type:            "stackdriver",
				CredentialsFile: ExpectEnv("GOOGLE_CREDENTIALS"),
			},
		},
	}),
	// Git sets up git client for cloning repositories
	git.Setup(git.Config{
		PrivateKeyFile: ExpectEnv("GIT_PRIVATE_KEY_FILE"),
		KnownHostsFile: ExpectEnv("GIT_KNOWN_HOSTS_FILE"),
	}),
	// Builder configures docker builder
	// don't think this is needed as we always build within k8s
	/* builder.Setup(builder.Config{
		// Logs into quay io server
		Server: "gcr.io",
		// Username is a username to login with the registry server
		// TODO: think how to best check for defined values?
		Username: "_json_key",
		// SecretFile is a registry password
		SecretFile: ExpectEnv("GOOGLE_CREDENTIALS"),
	}), */
	// Kube sets up kubernetes
	kube.Setup(kube.Config{
		// Path is a path to kubeconfig,
		// which is optional, if not set,
		// force assumes that it is running inside kubernetes
		Path: ExpectEnv("KUBE_CREDENTIALS"),
	}),
	// configure SSH to be able to log into hosts locally
	/* ssh.Setup(ssh.Config{
		KeyPairs: []ssh.KeyPair{
			{
				PrivateKeyFile: ExpectEnv("FORCE_SSH_PRIVATE_KEY_FILE_JENKINS"),
			},
			{
				PrivateKeyFile: ExpectEnv("FORCE_SSH_PRIVATE_KEY_FILE_OPS"),
			},
		},
		KnownHostsFile: ExpectEnv("FORCE_SSH_KNOWN_HOSTS_FILE"),
		User:           ExpectEnv("FORCE_SSH_USER"),
	}), */
	// configure Teleport to be able to log into hosts (via bastion)
	ssh.Setup(ssh.Config{
		KeyPairs: []ssh.KeyPair{
			{
				PrivateKeyFile: ExpectEnv("FORCE_TELEPORT_PRIVATE_KEY_FILE"),
				CertFile:       ExpectEnv("FORCE_TELEPORT_CERT_FILE"),
			},
		},
		ProxyJump:      ExpectEnv("FORCE_TELEPORT_PROXY_JUMP"),
		KnownHostsFile: ExpectEnv("FORCE_TELEPORT_KNOWN_HOSTS_FILE"),
		User:           ExpectEnv("FORCE_TELEPORT_SSH_USER"),
	}),
	// configure AWS plugin locally
	aws.Setup(aws.Config{
		Region: ExpectEnv("AWS_REGION"),
	}),
)
