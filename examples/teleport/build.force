func(){
	containerSetupScript := Marshal(
		// Setup configures force plugins, configurations
		// all other force files share the configuration defined in this file
		Setup(
			// Logging sets up logging to stackdriver
			// and stdout as well, with the current implementation,
			// it should go first so other plugins can use it
			Log(LogConfig{
				Level: "info",
				Outputs: []Output{
					{
						Type: "stdout",
					},
					{
						Type: "stackdriver",
						CredentialsFile: ExpectEnv("GOOGLE_CREDENTIALS"),
					},
				},
			}),
			// Git sets up git client for cloning repositories
			Git(GitConfig{
				PrivateKeyFile: ExpectEnv("GIT_PRIVATE_KEY_FILE"),
				KnownHostsFile: ExpectEnv("GIT_KNOWN_HOSTS_FILE"),
			}),
			// Builder configures docker builder
			Builder(BuilderConfig{
				// Logs into quay io server
				Server: "gcr.io",
				// Username is a username to login with the registry server
				// TODO: think how to best check for defined values?
				Username: "_json_key",
				// SecretFile is a registry password
				SecretFile: ExpectEnv("GOOGLE_CREDENTIALS"),
			}),
		),
	)

	forceImage := "gcr.io/kubeadm-167321/force:0.0.2-1"
	
	RunBuildJob := func(image string, script string){
		Run(Job{
			Name: Sprintf("tele-build-%v", ID()),
			Volumes: []Volume{
				{Name: "creds", Secret: &SecretSource{Name: "creds"}},
				{Name: "gitkey", Secret: &SecretSource{Name: "gitkey"}},						
				{Name: "scripts", ConfigMap: &ConfigMapSource{Name: "scripts"}},
				{Name: "cache", EmptyDir: &EmptyDirSource{}},
				{Name: "tmp", EmptyDir: &EmptyDirSource{}},
			},
			Containers: []Container{
				{
					Name: "kbuild",
					Image: forceImage,
					Command: Strings("force", "-d"),					
					Env: []EnvVar{
						// ID is passed so the job spawned in k8s
						// will have the same job id, having the same logs
						{Name: "FORCE_ID",Value: ID()},
						// Script is passed as an environment variable,
						// thanks to Marshal the script is inline,
						// can reference outside variables
						{
							Name: "FORCE_SCRIPT",
							Value: script,
						},
						// Setup is passed as an environment variable
						{
							Name: "FORCE_SETUP",
							Value: containerSetupScript,
						},
						{Name: "GOOGLE_CREDENTIALS", Value: "/var/secrets/google/force-creds.json"},
						{Name: "GIT_PRIVATE_KEY_FILE", Value: "/var/secrets/git/github.key"},
						{Name: "GIT_KNOWN_HOSTS_FILE", Value: "/var/secrets/git/known_hosts"},
					},
					VolumeMounts: []VolumeMount{
						// tmp is for temporary directory, just in case
						{Name: "tmp", MountPath: "/tmp"},
						// cache is for container build cache
						{Name: "cache", MountPath: "/root/.local"},
						// creds is for google creds
						{Name: "creds", MountPath: "/var/secrets/google"},
						// scripts is a script with a dockerfile
						{Name: "gitkey", MountPath: "/var/secrets/git"},
						// scripts is a script with a dockerfile
						{Name: "scripts", MountPath: "/mnt/scripts"},								
					},
					SecurityContext: &SecurityContext{Privileged: true},
				},
			},
		})
	}

	// UID is the uid to run the jobs
	uid := 1000
	// GID is the gid to run the jobs
	gid := 1000	

	BuildAndPublishImage := func(image string, commit string) {
		// buildbox is a version of the buildbox
		buildbox := "gcr.io/kubeadm-167321/buildbox:1.12.1"
		// Version to etcd to install in a container
		etcdVer := "v3.3.13"
		// build script is a build script to run
		buildScript := Marshal(
			Process(Spec{
				Name: "kbuild",
				Run: func(){
					Defer(Exit())
					// Create temporary directory
					tempDir := TempDir()
					// Remove it at the end of this sequence
					Defer(RemoveDir(tempDir))
					// Clone clones git repository into temp dir
					Clone(Repo{
						URL: "git@github.com:gravitational/teleport.git",
						Into: tempDir,
						// Commit is a commit variable defined by pull request watch,
						// the problem is that there is no namespacing here
						Hash: Unquote(commit),
						// Submodules is an optional submodule to init
						Submodules: Strings("e"),
					})
					// Build builds dockerfile and tags it in the local storage
					Build(Image{
						// Set build context to the cloned repository
						Context: tempDir,
						// Dockerfile is a dockerfile to build (from current dir),
						Dockerfile: "/mnt/scripts/test.dockerfile",
						// Tag is the tag to build - here, as you see, we need to reimplement
						// Sprintf and every other method that works with our vars
						Tag: Unquote(image),
						// Args are build arguments
						Args: []Arg{
							{Key: "BUILDBOX", Val: Unquote(buildbox)},
							{Key: "UID", Val: Sprintf("%v", Unquote(uid))},
							{Key: "GID", Val: Sprintf("%v", Unquote(gid))},
							{Key: "ETCD_VER", Val: Unquote(etcdVer)},
						},
					})
					Push(Image{Tag: Unquote(image)})
				},
			}),
		)
		RunBuildJob(image, buildScript)
	}	

	// RunTestJob runs test job
	RunTestJob := func(image string, name string, command []string) {
		Run(Job{
			Name: name,
			SecurityContext: &PodSecurityContext{RunAsUser: uid, RunAsGroup: gid},
			Volumes: []Volume{
				{Name: "gocache", EmptyDir: &EmptyDirSource{}},
				{Name: "etcd", EmptyDir: &EmptyDirSource{}},
			},
			Containers: []Container{
				{
					Image: image,
					Name: "test",
					Command: command,
					WorkingDir: "/gopath/src/github.com/gravitational/teleport/",
					Env: []EnvVar{{Name: "GOCACHE", Value: "/mnt/gocache"}},
					VolumeMounts: []VolumeMount{
						{Name: "gocache", MountPath: "/mnt/gocache"},
						{Name: "etcd", MountPath: "/gopath/src/github.com/gravitational/teleport/examples/etcd/data"},
					},
					TTY: true,
					Stdin: true,
				},
			},
		})
	}
}()
