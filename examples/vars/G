Process(Spec{
	Name: "log",
	Watch: Oneshot(),
	Run: func(){
		v := "hello"
		infofs(_{Message: "hola"})
		infofs(_{Message: "hola", BoolVar: true, IntVar: 7})		
		infof(Sprintf("hola: %v %v", v, "bueno"))
		infof2(Strings(v, "whoa"))
		infof(Marshal(func(){
			Infof(Sprintf("var: %v", Unquote(v)))
			Infof(Sprintf("var: %v", Strings("a", "b")))			
		}()))
		infof(Marshal(log.Setup(log.Config{
		Level: "info",
		Outputs: []log.Output{
			{
				Type: "stdout",
			},
			{
				Type: "stackdriver",
				CredentialsFile: ExpectEnv("LOGGING_CREDENTIALS"),
			},
		},
		})))		
		dir := TempDir("", "")
		Infof("My dir is %v", dir)
		Exit()
		Defer(
			RemoveAll(dir),
		)
		intVar := 1
		boolVar := true
		stringVar := "hello"
		infof(Sprintf("Outer scope %#v, i: %v, b: %v, s: %v", Test{I: intVar, B: boolVar, S: stringVar}, intVar, boolVar, stringVar))
		Infof("Outer scope %#v, i: %v, b: %v, s: %v", Test{I: intVar, B: boolVar, S: stringVar}, intVar, boolVar, stringVar)
		func(){
			intVar := 2
			boolVar := false
			stringVar := "byte"
			Infof("Inner scope i: %#v, b: %#v, s: %#v", intVar, boolVar, stringVar)
		}()
		Infof("Outer scope after inner i: %#v, b: %#v, s: %#v", intVar, boolVar, stringVar)
	},
})
