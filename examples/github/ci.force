// Process defines a set of actions triggered by a channel
Process(Spec{
	// Name is used for reporting and debugging purposes
	Name: "force-ci",
	Watch: github.PullRequests(github.Source{
		// Repo is a repository to watch
		Repo: "gravitational/force",
		// Default branch is master
		Branch: "master",
		// Approval configures an approval flow
		Approval: github.Approval{
			// Requies sets the approval as required
			Required: true,
			// Teams is a list of github teams who can approve PR test
			// or auto trigger pull request if they submit it.
			Teams: Strings("gravitational/devc", "gravitational/admins"),
		},
	}),
	Run:github.PostStatusOf(
		func(){
			// Create temporary directory "repo"
			repo := TempDir("", "")
			Defer(RemoveAll(repo))
			// Clone clones git repository into temp dir
			git.Clone(git.Repo{
				URL: "git@github.com:gravitational/force.git",
				Into: repo,
				// Commit is a commit variable defined by pull request watch,
				// the problem is that there is no namespacing here
				Hash: event.Commit,
			})
			// Image is an image name to build
			image := Sprintf(`gcr.io/kubeadm-167321/example:%v`, event.Commit)
			// Runtime is a go runtime to build
			goRuntime := "go1.12.1"
			// Build builds dockerfile and tags it in the local storage
			builder.Build(builder.Image{
				// Set build context to the cloned repository
				Context: repo,
				// Dockerfile is a dockerfile to build (from current dir),
				Dockerfile: "./Dockerfile",
				// Tag is the tag to build - here, as you see, we need to reimplement
				// Sprintf and every other method that works with our vars
				Tag: image,
				// Secrets are build secrets exposed to docker
				// container during the run
				Secrets: []builder.Secret{
					{
						ID: "logging-creds",
						File: ExpectEnv("LOGGING_CREDENTIALS"),
					},
				},
				// Args are build arguments
				Args: []builder.Arg{
					{
						// FORCE_ID is a force run ID
						Key: "GO_RUNTIME",
						Val: ID(),
					},
				},
			})
			// Push the built image
			builder.Push(builder.Image{Tag: image})
			// Prune the build cache
			builder.Prune()
		}(),
	),
})
