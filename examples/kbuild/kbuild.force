// This process triggers force build as a kubernetes job
Process(Spec{
	Name: "kbuild",
	Run: Continue(
		Define("forceImage", "gcr.io/kubeadm-167321/force:0.0.1-4"),
		Run(Job{
			Name: Sprintf("kbuild-%v", ID()),
			Volumes: []Volume{
				{Name: "creds", Secret: &SecretSource{Name: "creds"}},
				{Name: "scripts", ConfigMap: &ConfigMapSource{Name: "scripts"}},
				{Name: "cache", EmptyDir: &EmptyDirSource{}},
				{Name: "tmp", EmptyDir: &EmptyDirSource{}},
			},
			Containers: []Container{
				{
					Name: "kbuild",					
					Image: Var("forceImage"),
					Command: Strings("force", "-d"),					
					Env: []EnvVar{
						// ID is passed so the job spawned in k8s
						// will have the same job id, having the same logs
						{Name: "FORCE_ID",Value: ID()},
						// Script is passed as an environment variable,
						// thanks to Marshal the script is inline,
						// can reference outside variables
						{
							Name: "FORCE_SCRIPT",
							Value: Marshal(
								Process(Spec{
									Name: "kbuild",
									Run: Sequence(
										Define("img", "gcr.io/kubeadm-167321/hello:0.0.1"),
										Build(Image{
											Dockerfile: "/mnt/scripts/Dockerfile",
											Tag: Var("img"),
										}),
										Push(Image{Tag: Var("img")}),
										Exit(),
									),
								}),
							),
						},
						// Setup is passed as an environment variable
						{
							Name: "FORCE_SETUP",
							Value: Marshal(
								// Setup configures force plugins, configurations
								// all other force files share the configuration defined in this file
								Setup(
									// Builder configures docker builder
									Builder(BuilderConfig{
										// Logs into quay io server
										Server: "gcr.io",
										// Username is a username to login with the registry server
										// TODO: think how to best check for defined values?
										Username: "_json_key",
										// SecretFile is a registry password
										SecretFile: ExpectEnv("GOOGLE_CREDENTIALS"),
									}),
								),
							),
						},
						{Name: "GOOGLE_CREDENTIALS", Value: "/var/secrets/google/force-creds.json"},
					},
					VolumeMounts: []VolumeMount{
						// tmp is for temporary directory, just in case
						{Name: "tmp", MountPath: "/tmp"},
						// cache is for container build cache
						{Name: "cache", MountPath: "/root/.local"},
						// creds is for google creds
						{Name: "creds", MountPath: "/var/secrets/google"},
						// scripts is a script with a dockerfile
						{Name: "scripts", MountPath: "/mnt/scripts"},												
					},
					SecurityContext: &SecurityContext{Privileged: true},
				},
			},
		}),
		Exit(),
	),
})
