// Process defines a set of actions triggered by a channel
Process(Spec{
	Watch: github.Branches(github.Source{
		// Repo is a repository to watch
		Repo: "gravitational/force",
		Path: "docs/",
	}),
	Run: func(){
		Defer(Exit())
		// Create temporary directory "repo"
		repo := TempDir("", "")
		Defer(RemoveAll(repo))
		git.Clone(git.Repo{
			URL: "git@github.com:gravitational/force.git",
			Into: repo,
			Hash: event.Commit,
		})		
		// Image is an image name to build
		image := Sprintf(`gcr.io/kubeadm-167321/force-docs:%v`, event.Branch)
		// pyVer is a python image version
		pyVer := "3.7.4"
		// nginxVer is nginx version
		nginxVer := "1.17.3"
		// mkdocs ver is mkdocs version
		mkdocsVer := "1.0.4"
		// Build builds dockerfile and tags it in the local storage
		builder.Build(builder.Image{
			Dockerfile: "./Dockerfile",
			// Set build context to the cloned repository
			Context: repo,
			Tag: image,
			Args: []builder.Arg{
				{Key: "PY_VER", Val: pyVer},
				{Key: "NGINX_VER", Val: nginxVer},
				{Key: "MKDOCS_VER", Val: mkdocsVer},
			},
		})
		// Push the built image
		builder.Push(builder.Image{Tag: image})
		// Prune the build cache
		builder.Prune()
		docNamespace := "docrouter"
		branchName := kube.Name(event.Branch)
		// Create or update a deployment serving the docs
		kube.Apply(kube.Deployment{
			Name: branchName,
			Namespace: docNamespace,
			Spec: _{
				Replicas: 1,
				Selector: _{
					MatchLabels: _{
						branch: branchName,
					},
				},
				Template: _{
					Labels: _{
						branch: branchName,
					},
					Spec: _{
						Containers: []_{
							{
								Image: image,
								Name: branchName,
							},
						},											
					},
				},
			},
		})
	},
})
